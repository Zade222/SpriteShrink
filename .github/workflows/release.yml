name: Release Binaries and Library

on:
  release:
    types: [published]

jobs:
  build-release:
    name: Build Release Assets
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: "sprite_shrink"
            archive_name: "sprite_shrink-linux-x86_64.tar.gz"
            library_archive_name: "lib_sprite_shrink-linux-x86_64.tar.gz"
            static_lib_name: "libsprite_shrink.a"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: "sprite_shrink.exe"
            archive_name: "sprite_shrink-windows-x86_64.zip"
            library_archive_name: "lib_sprite_shrink-windows-x86_64.zip"
            static_lib_name: "sprite_shrink.lib"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cbindgen for header generation
        run: cargo install cbindgen

      - name: Build binary and library
        run: cargo build --workspace --release --target ${{ matrix.target }}

      - name: Generate C header file
        run: |
          cbindgen --config cbindgen.toml \
            --manifest-path crates/lib_sprite_shrink/Cargo.toml \
            --output target/${{ matrix.target }}/release/lib_sprite_shrink.

      - name: Prepare Release Assets (Binary and Library)
        shell: bash
        run: |
          BINARY_PATH="./target/${{ matrix.target }}/release/${{ matrix.binary_name }}"
          mkdir -p ./release/app
          mv "$BINARY_PATH" "./release/app/"
          cd ./release/app
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a "../${{ matrix.archive_name }}" "${{ matrix.binary_name }}"
          else
            tar -czvf "../${{ matrix.archive_name }}" "${{ matrix.binary_name }}"
          fi
          cd ../..

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            LIB_PATH="./target/${{ matrix.target }}/release/sprite_shrink.lib"
          else
            LIB_PATH="./target/${{ matrix.target }}/release/libsprite_shrink.a"
          fi
          
          HEADER_PATH="./target/${{ matrix.target }}/release/lib_sprite_shrink.h"
          
          mkdir -p ./release/lib
          mv "$LIB_PATH" "./release/lib/"
          mv "$HEADER_PATH" "./release/lib/"
          
          cd ./release/lib
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a "../${{ matrix.library_archive_name }}" "${{ matrix.static_lib_name }}" "lib_sprite_shrink.h"
          else
            tar -czvf "../${{ matrix.library_archive_name }}" "${{ matrix.static_lib_name }}" "lib_sprite_shrink.h"
          fi
          cd ../..

      - name: Upload All Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ matrix.target }}
          path: ./release/

  release:
    name: Create GitHub Release
    needs: build-release
    runs-on: ubuntu-latest

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*.zip, artifacts/**/*.tar.gz
